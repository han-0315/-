[{"role": "system", "content": "You will get information about a codebase that is currently on disk in the current folder.\nFrom this you will answer with code blocks that includes all the necessary unix terminal commands to a) install dependencies b) run all necessary parts of the codebase (in parallell if necessary).\nDo not install globally. Do not use sudo.\nDo not explain the code, just give the commands.\nDo not use placeholders, use example values (like . for a folder argument) if necessary.\n"}, {"role": "user", "content": "Information about the codebase:\n\nBased on the requirements, here are the core classes, functions, and methods that will be necessary:\n\nClasses:\n- Game: responsible for managing the game state, including the snake, food, and score.\n- Snake: responsible for managing the snake's position, movement, and growth.\n- Food: responsible for generating and managing the food's position.\n- View: responsible for rendering the game state on the screen.\n- Controller: responsible for handling user input and updating the game state accordingly.\n\nFunctions:\n- main(): the entry point of the game.\n\nMethods:\n- Game:\n  - __init__(self): initializes the game state.\n  - update(self): updates the game state.\n  - is_game_over(self): checks if the game is over.\n  - get_score(self): returns the current score.\n- Snake:\n  - __init__(self, x, y): initializes the snake's position.\n  - move(self, direction): moves the snake in the specified direction.\n  - grow(self): increases the length of the snake.\n  - get_head_position(self): returns the position of the snake's head.\n  - get_body_positions(self): returns the positions of the snake's body segments.\n- Food:\n  - __init__(self): initializes the food's position.\n  - generate(self): generates a new position for the food.\n  - get_position(self): returns the position of the food.\n- View:\n  - __init__(self): initializes the view.\n  - render(self, game_state): renders the game state on the screen.\n- Controller:\n  - __init__(self): initializes the controller.\n  - get_input(self): gets user input.\n\nHere are the files and their contents:\n\n**requirements.txt**\n```\npygame==2.0.1\n```\n\n**game.py**\n```python\nfrom snake import Snake\nfrom food import Food\n\nclass Game:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n        self.snake = Snake(width // 2, height // 2)\n        self.food = Food()\n        self.score = 0\n\n    def update(self, direction):\n        self.snake.move(direction)\n\n        if self.snake.get_head_position() == self.food.get_position():\n            self.snake.grow()\n            self.food.generate()\n            self.score += 1\n\n    def is_game_over(self):\n        head_position = self.snake.get_head_position()\n        body_positions = self.snake.get_body_positions()\n\n        if (\n            head_position[0] < 0 or\n            head_position[0] >= self.width or\n            head_position[1] < 0 or\n            head_position[1] >= self.height or\n            head_position in body_positions\n        ):\n            return True\n\n        return False\n\n    def get_score(self):\n        return self.score\n```\n\n**snake.py**\n```python\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Segment:\n    x: int\n    y: int\n\nclass Snake:\n    def __init__(self, x, y):\n        self.segments = [Segment(x, y)]\n        self.direction = \"right\"\n\n    def move(self, direction):\n        if (\n            (direction == \"left\" and self.direction != \"right\") or\n            (direction == \"right\" and self.direction != \"left\") or\n            (direction == \"up\" and self.direction != \"down\") or\n            (direction == \"down\" and self.direction != \"up\")\n        ):\n            head = self.segments[0]\n\n            if direction == \"left\":\n                new_head = Segment(head.x - 1, head.y)\n            elif direction == \"right\":\n                new_head = Segment(head.x + 1, head.y)\n            elif direction == \"up\":\n                new_head = Segment(head.x, head.y - 1)\n            elif direction == \"down\":\n                new_head = Segment(head.x, head.y + 1)\n\n            self.segments.insert(0, new_head)\n            self.segments.pop()\n\n            self.direction = direction\n\n    def grow(self):\n        tail = self.segments[-1]\n        self.segments.append(tail)\n\n    def get_head_position(self):\n        return (self.segments[0].x, self.segments[0].y)\n\n    def get_body_positions(self):\n        return [(segment.x, segment.y) for segment in self.segments[1:]]\n```\n\n**food.py**\n```python\nimport random\n\nclass Food:\n    def __init__(self):\n        self.position = (0, 0)\n\n    def generate(self):\n        self.position = (random.randint(0, 19), random.randint(0, 19))\n\n    def get_position(self):\n        return self.position\n```\n\n**view.py**\n```python\nimport pygame\n\nclass View:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n        self.block_size = 20\n        self.screen = pygame.display.set_mode((width * self.block_size, height * self.block_size))\n        pygame.display.set_caption(\"Snake\")\n\n    def render(self, game_state):\n        self.screen.fill((0, 0, 0))\n\n        for segment in game_state[\"snake\"]:\n            pygame.draw.rect(self.screen, (255, 255, 255), (segment[0] * self.block_size, segment[1] * self.block_size, self.block_size, self.block_size))\n\n        pygame.draw.rect(self.screen, (255, 0, 0), (game_state[\"food\"][0] * self.block_size, game_state[\"food\"][1] * self.block_size, self.block_size, self.block_size))\n\n        pygame.display.update()\n```\n\n**controller.py**\n```python\nimport pygame\n\nclass Controller:\n    def __init__(self):\n        pygame.init()\n\n    def get_input(self):\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                return \"quit\"\n            elif event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_LEFT:\n                    return \"left\"\n                elif event.key == pygame.K_RIGHT:\n                    return \"right\"\n                elif event.key == pygame.K_UP:\n                    return \"up\"\n                elif event.key == pygame.K_DOWN:\n                    return \"down\"\n``` \n\n**main.py**\n```python\nfrom game import Game\nfrom view import View\nfrom controller import Controller\n\ndef main():\n    game = Game(20, 20)\n    view = View(20, 20)\n    controller = Controller()\n\n    while True:\n        direction = controller.get_input()\n\n        if direction == \"quit\":\n            break\n\n        game.update(direction)\n\n        if game.is_game_over():\n            break\n\n        game_state = {\n            \"snake\": game.snake.get_body_positions() + [game.snake.get_head_position()],\n            \"food\": game.food.get_position()\n        }\n\n        view.render(game_state)\n\n    print(f\"Game over! Your score is {game.get_score()}\")\n\nif __name__ == \"__main__\":\n    main()\n```"}, {"role": "assistant", "content": "To install dependencies:\n```\npip install -r requirements.txt\n```\n\nTo run the codebase:\n```\npython main.py\n```"}]