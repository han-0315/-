Based on the requirements, here are the core classes, functions, and methods that will be necessary:

Classes:
- Game: responsible for managing the game state, including the snake, food, and score.
- Snake: responsible for managing the snake's position, movement, and growth.
- Food: responsible for generating and managing the food's position.
- View: responsible for rendering the game state on the screen.
- Controller: responsible for handling user input and updating the game state accordingly.

Functions:
- main(): the entry point of the game.

Methods:
- Game:
  - __init__(self): initializes the game state.
  - update(self): updates the game state.
  - is_game_over(self): checks if the game is over.
  - get_score(self): returns the current score.
- Snake:
  - __init__(self, x, y): initializes the snake's position.
  - move(self, direction): moves the snake in the specified direction.
  - grow(self): increases the length of the snake.
  - get_head_position(self): returns the position of the snake's head.
  - get_body_positions(self): returns the positions of the snake's body segments.
- Food:
  - __init__(self): initializes the food's position.
  - generate(self): generates a new position for the food.
  - get_position(self): returns the position of the food.
- View:
  - __init__(self): initializes the view.
  - render(self, game_state): renders the game state on the screen.
- Controller:
  - __init__(self): initializes the controller.
  - get_input(self): gets user input.

Here are the files and their contents:

**requirements.txt**
```
pygame==2.0.1
```

**game.py**
```python
from snake import Snake
from food import Food

class Game:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.snake = Snake(width // 2, height // 2)
        self.food = Food()
        self.score = 0

    def update(self, direction):
        self.snake.move(direction)

        if self.snake.get_head_position() == self.food.get_position():
            self.snake.grow()
            self.food.generate()
            self.score += 1

    def is_game_over(self):
        head_position = self.snake.get_head_position()
        body_positions = self.snake.get_body_positions()

        if (
            head_position[0] < 0 or
            head_position[0] >= self.width or
            head_position[1] < 0 or
            head_position[1] >= self.height or
            head_position in body_positions
        ):
            return True

        return False

    def get_score(self):
        return self.score
```

**snake.py**
```python
from dataclasses import dataclass
from typing import List

@dataclass
class Segment:
    x: int
    y: int

class Snake:
    def __init__(self, x, y):
        self.segments = [Segment(x, y)]
        self.direction = "right"

    def move(self, direction):
        if (
            (direction == "left" and self.direction != "right") or
            (direction == "right" and self.direction != "left") or
            (direction == "up" and self.direction != "down") or
            (direction == "down" and self.direction != "up")
        ):
            head = self.segments[0]

            if direction == "left":
                new_head = Segment(head.x - 1, head.y)
            elif direction == "right":
                new_head = Segment(head.x + 1, head.y)
            elif direction == "up":
                new_head = Segment(head.x, head.y - 1)
            elif direction == "down":
                new_head = Segment(head.x, head.y + 1)

            self.segments.insert(0, new_head)
            self.segments.pop()

            self.direction = direction

    def grow(self):
        tail = self.segments[-1]
        self.segments.append(tail)

    def get_head_position(self):
        return (self.segments[0].x, self.segments[0].y)

    def get_body_positions(self):
        return [(segment.x, segment.y) for segment in self.segments[1:]]
```

**food.py**
```python
import random

class Food:
    def __init__(self):
        self.position = (0, 0)

    def generate(self):
        self.position = (random.randint(0, 19), random.randint(0, 19))

    def get_position(self):
        return self.position
```

**view.py**
```python
import pygame

class View:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.block_size = 20
        self.screen = pygame.display.set_mode((width * self.block_size, height * self.block_size))
        pygame.display.set_caption("Snake")

    def render(self, game_state):
        self.screen.fill((0, 0, 0))

        for segment in game_state["snake"]:
            pygame.draw.rect(self.screen, (255, 255, 255), (segment[0] * self.block_size, segment[1] * self.block_size, self.block_size, self.block_size))

        pygame.draw.rect(self.screen, (255, 0, 0), (game_state["food"][0] * self.block_size, game_state["food"][1] * self.block_size, self.block_size, self.block_size))

        pygame.display.update()
```

**controller.py**
```python
import pygame

class Controller:
    def __init__(self):
        pygame.init()

    def get_input(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return "quit"
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    return "left"
                elif event.key == pygame.K_RIGHT:
                    return "right"
                elif event.key == pygame.K_UP:
                    return "up"
                elif event.key == pygame.K_DOWN:
                    return "down"
``` 

**main.py**
```python
from game import Game
from view import View
from controller import Controller

def main():
    game = Game(20, 20)
    view = View(20, 20)
    controller = Controller()

    while True:
        direction = controller.get_input()

        if direction == "quit":
            break

        game.update(direction)

        if game.is_game_over():
            break

        game_state = {
            "snake": game.snake.get_body_positions() + [game.snake.get_head_position()],
            "food": game.food.get_position()
        }

        view.render(game_state)

    print(f"Game over! Your score is {game.get_score()}")

if __name__ == "__main__":
    main()
```